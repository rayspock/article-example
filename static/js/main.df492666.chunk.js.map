{"version":3,"sources":["js/reducers/articleReducer.ts","js/reducers/index.ts","js/constants/action-types.ts","js/middleware/index.ts","js/sagas/api-saga.ts","js/store/index.ts","js/actions/index.ts","js/components/List.tsx","js/components/Form.tsx","js/components/Post.tsx","js/components/App.tsx","index.tsx"],"names":["initialState","articles","remoteArticles","illegalArticle","id","title","rootReducer","combineReducers","article","state","action","type","Object","assign","payload","concat","forbiddenWords","watcherSage","workerSaga","takeEvery","call","getData","put","fetch","then","response","json","initialiseSagaMiddleware","createSagaMiddleware","storeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","dispatch","next","filter","word","includes","length","run","apiSaga","List","connect","className","map","el","key","ConnectedForm","props","handleChange","bind","handleSubmit","event","this","setState","target","value","preventDefault","uuidv1","addArticle","onSubmit","Alert","variant","htmlFor","onChange","Component","Form","Post","slice","App","render","document","getElementById"],"mappings":"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","file":"static/js/main.df492666.chunk.js","sourcesContent":["import {ADD_ARTICLE, DATA_LOADED, FOUND_BAD_WORD} from \"../constants/action-types\";\nimport {ArticleActionTypes} from \"../actions/types\";\nimport {ArticleState} from \"./types\";\n\nconst initialState = {\n    articles: [],\n    remoteArticles: [],\n    illegalArticle: {\n        id:\"\",\n        title:\"\"\n    }\n};\n\nexport function articleReducer(state: ArticleState = initialState, action: ArticleActionTypes): ArticleState {\n    if (action.type === ADD_ARTICLE) {\n        return Object.assign({}, state, {\n            articles: [...state.articles, action.payload]\n        });\n    }\n    if (action.type === FOUND_BAD_WORD){\n        return Object.assign({}, state, {\n            illegalArticle: action.payload\n        });\n    }\n    if (action.type === DATA_LOADED) {\n        return Object.assign({}, state, {\n           remoteArticles: state.remoteArticles.concat(action.payload)\n        });\n    }\n    return state;\n}\n","import {combineReducers} from 'redux';\nimport {articleReducer} from \"./articleReducer\";\nimport {ArticleState} from \"./types\";\n\nexport interface AppState {\n    article: ArticleState\n}\n\nconst rootReducer = combineReducers<AppState>({\n    article: articleReducer\n});\n\nexport default rootReducer;\n","export const ADD_ARTICLE = \"ADD_ARTICLE\";\nexport const FOUND_BAD_WORD = \"FOUND_BAD_WORD\";\nexport const DATA_REQUESTED = \"DATA_REQUESTED\";\nexport const DATA_LOADED = \"DATA_LOADED\";\nexport const API_ERRORED = \"API_ERRORED\";\n","import {ADD_ARTICLE} from \"../constants/action-types\";\nimport {ArticleActionTypes} from \"../actions/types\";\nimport {Dispatch} from \"redux\";\nimport {foundBadWord} from \"../actions\";\n\n\ninterface MiddlewareProps {\n    dispatch: Dispatch\n}\n\nconst forbiddenWords = [\"spam\", \"money\"];\n\nexport function forbiddenWordsMiddleware({dispatch}: MiddlewareProps) {\n    return function (next: Function) {\n        return function (action: ArticleActionTypes) {\n            if (action.type === ADD_ARTICLE) {\n                const foundWord = forbiddenWords.filter(word =>\n                    action.payload.title.includes(word)\n                );\n\n                if (foundWord.length) {\n                    return dispatch(foundBadWord({\n                        id: \"\",\n                        title: action.payload.title\n                    }));\n                }\n            }\n            return next(action);\n        }\n    }\n}\n","import { takeEvery, call, put } from \"redux-saga/effects\";\nimport {API_ERRORED, DATA_LOADED, DATA_REQUESTED} from \"../constants/action-types\";\nexport default function* watcherSage() {\n    yield takeEvery(DATA_REQUESTED, workerSaga);\n}\nfunction* workerSaga() {\n    try {\n        const payload = yield call(getData);\n        yield put({ type: DATA_LOADED, payload });\n    } catch(e){\n        yield put({ type: API_ERRORED, payload:e });\n    }\n}\n\nfunction getData() {\n    return fetch(\"https://jsonplaceholder.typicode.com/posts\").then(response =>\n        response.json()\n    );\n}\n","import {applyMiddleware, compose, createStore} from \"redux\";\nimport rootReducer from \"../reducers/index\";\nimport {forbiddenWordsMiddleware} from \"../middleware\";\nimport createSagaMiddleware from \"redux-saga\";\nimport apiSaga from \"../sagas/api-saga\";\n\nconst initialiseSagaMiddleware = createSagaMiddleware();\n\nconst storeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n    rootReducer,\n    storeEnhancers(applyMiddleware(forbiddenWordsMiddleware, initialiseSagaMiddleware))\n);\n\ninitialiseSagaMiddleware.run(apiSaga);\n\nexport default store;\n","import {ADD_ARTICLE, DATA_REQUESTED, FOUND_BAD_WORD} from \"../constants/action-types\";\nimport {ArticleActionTypes} from \"./types\";\nimport {Article} from \"../reducers/types\";\n\nexport function addArticle(payload: Article): ArticleActionTypes {\n    return {\n        type: ADD_ARTICLE,\n        payload\n    }\n};\n\nexport function foundBadWord(payload: Article): ArticleActionTypes {\n    return {\n        type: FOUND_BAD_WORD,\n        payload\n    }\n};\n\nexport function getData() {\n    return { type: DATA_REQUESTED }\n}\n","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {Article} from \"../reducers/types\";\nimport {AppState} from \"../reducers\";\n\ninterface ListProps {\n    articles: Array<Article>\n}\n\nconst mapStateToProps = (state: AppState) => {\n    const {article} = state;\n    return {\n        articles: article.articles\n    };\n};\n\nconst ConnectedList = ({articles}: ListProps) => {\n    return (\n        <ul className=\"list-group list-group-flush\">\n            {articles.map(el => (\n                    <li className=\"list-group-item\" key={el.id}>\n                        {el.title}\n                    </li>\n                )\n            )}\n        </ul>\n    );\n};\n\nconst List = connect(mapStateToProps)(ConnectedList);\n\nexport default List;\n","import React, {Component} from \"react\";\nimport {connect} from \"react-redux\";\nimport uuidv1 from \"uuid\";\nimport {addArticle} from \"../actions\";\nimport {Article} from \"../reducers/types\";\nimport {Dispatch} from \"redux\";\nimport {AppState} from \"../reducers\";\nimport Alert from \"react-bootstrap/Alert\";\n\ninterface ConnectedFormState {\n    title: string;\n}\n\ninterface ConnectedFormProps {\n    addArticle: Function;\n    illegalArticle: Article;\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n        addArticle: (article: Article) => dispatch(addArticle(article))\n    };\n}\n\nconst mapStateToProps = (state: AppState) => {\n    const {article} = state;\n    return {illegalArticle: article.illegalArticle};\n};\n\nclass ConnectedForm extends Component<ConnectedFormProps, ConnectedFormState> {\n    constructor(props: ConnectedFormProps) {\n        super(props);\n        this.state = {\n            title: \"\"\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(event: any) {\n        this.setState({title: event.target.value});\n    }\n\n    handleSubmit(event: any) {\n        event.preventDefault();\n        const {title} = this.state;\n        const id = uuidv1();\n        this.props.addArticle({title, id});\n        this.setState({title: \"\"});\n    }\n\n    render() {\n        const {title} = this.state;\n        const {illegalArticle} = this.props\n        return (\n            <form onSubmit={this.handleSubmit}>\n                {illegalArticle.title && (\n                    <Alert variant='danger'>\n                        {illegalArticle.title} is illegal word !\n                    </Alert>\n                )}\n                <div className=\"form-group\">\n                    <label htmlFor=\"title\">Title</label>\n                    <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        id=\"title\"\n                        value={title}\n                        onChange={this.handleChange}\n                    />\n                </div>\n                <button type=\"submit\" className=\"btn btn-success btn-lg\">\n                    SAVE\n                </button>\n            </form>\n        );\n    }\n}\n\nconst Form = connect(mapStateToProps, mapDispatchToProps)(ConnectedForm);\n\nexport default Form;\n","import React, {Component} from \"react\";\nimport {connect} from \"react-redux\";\nimport {getData} from \"../actions/index\";\nimport {AppState} from \"../reducers\";\nimport {Dispatch} from \"redux\";\nimport {Article} from \"../reducers/types\";\n\n\ninterface PostProps {\n    getData: Function,\n    articles: Array<Article>\n}\n\nconst mapStateToProps = (state: AppState) => {\n    const {article} = state;\n    return {\n        articles: article.remoteArticles.slice(0, 10)\n    };\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n        getData: () => dispatch(getData())\n    };\n}\n\nclass Post extends Component<PostProps> {\n\n    componentDidMount() {\n        this.props.getData();\n    }\n\n    render() {\n        return (\n            <ul className=\"list-group list-group-flush\">\n                {this.props.articles.map(el => (\n                    <li className=\"list-group-item\" key={el.id}>\n                        {el.title}\n                    </li>\n                ))}\n            </ul>\n        );\n    }\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Post);\n","import React from \"react\";\nimport List from \"./List\";\nimport Form from \"./Form\";\nimport Post from \"./Post\";\n\nconst App = () => (\n  <div className=\"row mt-5\">\n      <div className=\"col-md-4 offset-md-1\">\n          <h2>Add a new article</h2>\n          <Form />\n      </div>\n      <div className=\"col-md-4 offset-md-1\">\n      <h2>Articles</h2>\n          <List />\n      </div>\n      <div className=\"col-md-4 offset-md-1\">\n        <h2>API posts</h2>\n          <Post />\n      </div>\n  </div>\n);\n\nexport default App;\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./js/store/index\";\nimport App from \"./js/components/App\";\nimport 'bootstrap/dist/css/bootstrap.css';\n\nrender(\n  <Provider store={store}>\n      <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n"],"sourceRoot":""}